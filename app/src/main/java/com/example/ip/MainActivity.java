package com.example.ip;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.Observer;
import androidx.work.Data;
import androidx.work.OneTimeWorkRequest;
import androidx.work.WorkInfo;
import androidx.work.WorkManager;

import android.net.Uri;
import android.os.Bundle;
import android.widget.Button;
import android.widget.TextView;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

public class MainActivity extends AppCompatActivity {

    private TextView tvOutput;
    private Button btnPickFile, btnStart;
    private Uri pickedFileUri;
    private ActivityResultLauncher<String[]> filePickerLauncher;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        tvOutput = findViewById(R.id.tvOutput);
        btnPickFile = findViewById(R.id.btnPickFile);
        btnStart = findViewById(R.id.btnStart);

        // File Picker
        filePickerLauncher = registerForActivityResult(
                new ActivityResultContracts.OpenDocument(),
                uri -> {
                    if (uri != null) {
                        pickedFileUri = uri;
                        tvOutput.setText("–§–∞–π–ª –≤—ã–±—Ä–∞–Ω: " + uri.toString());
                    }
                });

        btnPickFile.setOnClickListener(v -> {
            filePickerLauncher.launch(new String[]{
                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "application/vnd.ms-excel",
                    "text/csv",
                    "text/plain"
            });
        });

        // –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
        btnStart.setOnClickListener(v -> {
            if (pickedFileUri == null) {
                tvOutput.setText("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª!");
                return;
            }

            Data inputData = new Data.Builder()
                    .putString(ScanWorker.KEY_FILE_URI, pickedFileUri.toString())
                    .build();

            OneTimeWorkRequest request = new OneTimeWorkRequest.Builder(ScanWorker.class)
                    .setInputData(inputData)
                    .build();

            WorkManager.getInstance(this).enqueue(request);

            WorkManager.getInstance(this).getWorkInfoByIdLiveData(request.getId())
                    .observe(this, new Observer<WorkInfo>() {
                        @Override
                        public void onChanged(WorkInfo workInfo) {
                            if (workInfo == null) return;
                            if (workInfo.getProgress().getBoolean("logUpdated", false)) {
                                tvOutput.setText(readLogTail());
                            }
                            if (workInfo.getState().isFinished()) {
                                tvOutput.append("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
                            }
                        }
                    });
        });

        // üî• –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å—Ä–∞–∑—É –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ª–æ–≥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫)
        tvOutput.setText(readLogTail());
    }

    @Override
    protected void onResume() {
        super.onResume();
        // üî• –ö–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–∫—Ç–∏–≤–∏—Ç–∏ —Ç–æ–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥
        tvOutput.setText(readLogTail());
    }

    // –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
    private String readLogTail() {
        File logFile = new File(getExternalFilesDir(null), "scan_log.txt");
        if (!logFile.exists()) return "–õ–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç";

        StringBuilder sb = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new FileReader(logFile))) {
            String line;
            int maxLines = 50;
            java.util.LinkedList<String> buffer = new java.util.LinkedList<>();
            while ((line = br.readLine()) != null) {
                buffer.add(line);
                if (buffer.size() > maxLines) buffer.removeFirst();
            }
            for (String s : buffer) sb.append(s).append("\n");
        } catch (Exception e) {
            return "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: " + e.getMessage();
        }
        return sb.toString();
    }
}
