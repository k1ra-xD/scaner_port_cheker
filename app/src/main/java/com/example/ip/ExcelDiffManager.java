package com.example.ip;

import android.content.ContentResolver;
import android.net.Uri;
import android.util.Log;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * ExcelDiffManager ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Ç–æ—Ç –∂–µ Excel –Ω–æ–≤—ã–π –ª–∏—Å—Ç "–ò–∑–º–µ–Ω–µ–Ω–∏—è N"
 * —Å —Ä–∞–∑–ª–∏—á–∏—è–º–∏ –º–µ–∂–¥—É –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∏ –Ω–æ–≤—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
 * –¢–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—â–µ—Ç –∫–æ–ª–æ–Ω–∫—É —Å "–ù–∞–∑–≤–∞–Ω–∏–µ" –∏–ª–∏ "Name" –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É.
 */
public class ExcelDiffManager {

    private static final String TAG = "ExcelDiffManager";

    public static void writeDiffToSameFile(
            ContentResolver cr,
            Uri uri,
            Map<String, Map<String, String>> oldData,
            Map<String, Map<String, String>> newData
    ) {
        try (InputStream in = cr.openInputStream(uri)) {
            if (in == null) {
                Log.e(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å Excel");
                return;
            }

            XSSFWorkbook wb = new XSSFWorkbook(in);

            // üü¢ –°—á–∏—Ç—ã–≤–∞–µ–º –∏–º–µ–Ω–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞ (–∏—â–µ–º –∫–æ–ª–æ–Ω–∫—É "–ù–∞–∑–≤–∞–Ω–∏–µ" –∏–ª–∏ "Name")
            Map<String, String> nameMap = new HashMap<>();
            try {
                Sheet firstSheet = wb.getSheetAt(0);
                if (firstSheet != null) {
                    Row headerRow = firstSheet.getRow(0);
                    int nameCol = -1;
                    int ipCol = -1;

                    if (headerRow != null) {
                        for (Cell c : headerRow) {
                            String text = c.toString().trim().toLowerCase(Locale.ROOT);
                            if (text.contains("–Ω–∞–∑–≤–∞–Ω–∏–µ") || text.contains("name"))
                                nameCol = c.getColumnIndex();
                            if (text.contains("ip") || text.contains("–∞–¥—Ä–µ—Å") || text.contains("address"))
                                ipCol = c.getColumnIndex();
                        }
                    }

                    // –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ IP –∫–æ–ª–æ–Ω–∫—É ‚Äî –ø—É—Å—Ç—å –±—É–¥–µ—Ç –≤—Ç–æ—Ä–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if (ipCol == -1) ipCol = 1;

                    for (Row row : firstSheet) {
                        if (row == null || row.getRowNum() == 0) continue;

                        Cell ipCell = row.getCell(ipCol);
                        String ip = ipCell != null ? ipCell.toString().trim() : "";
                        if (ip.isEmpty()) continue;

                        String name = "‚Äî";
                        if (nameCol != -1) {
                            Cell nameCell = row.getCell(nameCol);
                            if (nameCell != null) {
                                name = nameCell.toString().trim();
                                if (name.isEmpty()) name = "‚Äî";
                            }
                        }

                        nameMap.put(ip, name);
                    }
                }
            } catch (Exception e) {
                Log.w(TAG, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è: " + e.getMessage());
            }

            // üü£ –ï—Å–ª–∏ –≤ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏–∑ ScanWorker) –µ—Å—Ç—å NAME ‚Äî –æ–Ω –∑–∞–º–µ–Ω—è–µ—Ç Excel-–∏–º—è
            for (Map.Entry<String, Map<String, String>> entry : newData.entrySet()) {
                String ip = entry.getKey();
                Map<String, String> row = entry.getValue();
                if (row != null && row.containsKey("NAME")) {
                    String nm = row.get("NAME");
                    if (nm != null && !nm.trim().isEmpty()) {
                        nameMap.put(ip, nm.trim());
                    }
                }
            }

            // üßæ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç "–ò–∑–º–µ–Ω–µ–Ω–∏—è N"
            int changeIndex = 1;
            for (int i = 0; i < wb.getNumberOfSheets(); i++) {
                if (wb.getSheetName(i).startsWith("–ò–∑–º–µ–Ω–µ–Ω–∏—è")) changeIndex++;
            }

            Sheet diff = wb.createSheet("–ò–∑–º–µ–Ω–µ–Ω–∏—è " + changeIndex);
            Row header = diff.createRow(0);
            header.createCell(0).setCellValue("–ò–º—è");
            header.createCell(1).setCellValue("IP");
            header.createCell(2).setCellValue("–ü–æ–ª–µ");
            header.createCell(3).setCellValue("–°—Ç–∞—Ä–æ–µ");
            header.createCell(4).setCellValue("–ù–æ–≤–æ–µ (–≤—Ä–µ–º—è)");

            String now = new SimpleDateFormat("dd.MM.yyyy HH:mm", Locale.getDefault()).format(new Date());
            int rowIndex = 1;
            String[] fields = {"PING", "HTTP", "SSH", "Modbus"};

            for (String ip : newData.keySet()) {
                Map<String, String> oldRow = oldData.get(ip);
                Map<String, String> newRow = newData.get(ip);
                if (newRow == null) continue;

                String name = nameMap.getOrDefault(ip, "‚Äî");

                for (String key : fields) {
                    String oldVal = oldRow != null ? oldRow.getOrDefault(key, "‚Äî") : "‚Äî";
                    String newVal = newRow.getOrDefault(key, "‚Äî");
                    if (!Objects.equals(oldVal, newVal)) {
                        Row r = diff.createRow(rowIndex++);
                        r.createCell(0).setCellValue(name);
                        r.createCell(1).setCellValue(ip);
                        r.createCell(2).setCellValue(key);
                        r.createCell(3).setCellValue(oldVal);
                        r.createCell(4).setCellValue(newVal + " (" + now + ")");
                    }
                }
            }

            for (int i = 0; i <= 4; i++) diff.setColumnWidth(i, 22 * 256);

            // üíæ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª
            try (OutputStream out = cr.openOutputStream(uri, "rwt")) {
                wb.write(out);
                out.flush();
            }

            wb.close();
            Log.i(TAG, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ª–∏—Å—Ç –ò–∑–º–µ–Ω–µ–Ω–∏—è " + changeIndex + " (—Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É)");

        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–∞: " + e.getMessage(), e);
        }
    }
}
